**Arrays - DS

import math
import os
import random
import re
import sys


def reverseArray(a):
    l = a[::-1]
    return l

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    arr_count = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    res = reverseArray(arr)

    fptr.write(' '.join(map(str, res)))
    fptr.write('\n')

    fptr.close()
    
     
 **Solve Me First
 
 def solveMeFirst(a,b):
  return a+b
	
 

num1 = int(input())
num2 = int(input())
res = solveMeFirst(num1,num2)
print(res)



**Simple Array Sum
import math
import os
import random
import re
import sys


def simpleArraySum(ar):
  s = 0
      
  for i in ar:   
    s= i+s
  return s
      

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ar_count = int(input().strip())

    ar = list(map(int, input().rstrip().split()))

    result = simpleArraySum(ar)

    fptr.write(str(result) + '\n')

    fptr.close()

**Compare the Triplets

import math
import os
import random
import re
import sys


def compareTriplets(a, b):
  
  alice = 0
  bob=0
  for i in range(0,3):
    if a[i]>b[i]:
      alice+=1
    if a[i]<b[i]:
      bob+=1
    
  return  [alice,bob]    
      

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    a = list(map(int, input().rstrip().split()))

    b = list(map(int, input().rstrip().split()))

    result = compareTriplets(a, b)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
    
**A Very Big Sum

import math
import os
import random
import re
import sys



def aVeryBigSum(ar):
  s=0
  for i in ar:
    s+=i
  return s  
    
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ar_count = int(input().strip())

    ar = list(map(int, input().rstrip().split()))

    result = aVeryBigSum(ar)

    fptr.write(str(result) + '\n')

    fptr.close()
    
    
**Diagonal Difference

import math
import os
import random
import re
import sys


def diagonalDifference(arr):
  s1=sum([arr[x][x] for x in range(len(arr))])
  s2= sum([arr[x][n-1-x] for x in range(len(arr))])
  return abs(s1-s2)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    result = diagonalDifference(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
    
    
**Plus Minus

import math
import os
import random
import re
import sys


def plusMinus(arr):
  c = (len(arr))
  p = 0
  n =0
  z=0
  for i in range(len(arr)):
    if arr[i] < 0:
      n+=1
    elif arr[i]>0:
      p+=1
    else:
      z+=1
  print('%f'%(p/c))
  print('%f'%(n/c))
  print('%f'%(z/c))  
  
  
if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    plusMinus(arr)
    
** Staircase

import math
import os
import random
import re
import sys

def staircase(n):
  for i in range(1,n+1):
    print(f'{"#"*i:>{n}}')

if __name__ == '__main__':
    n = int(input().strip())

    staircase(n)
    
**Mini-Max Sum
import math
import os
import random
import re
import sys

def miniMaxSum(arr):
  a = sorted(arr)
  print(sum(a[:-1]),sum(a[1:]))


if __name__ == '__main__':

    arr = list(map(int, input().rstrip().split()))

    miniMaxSum(arr)
    
**Birthday Cake Candles

import math
import os
import random
import re
import sys

def birthdayCakeCandles(candles):
  count = 0
  m = max(candles)
  for i in candles:
    if i ==m:
      count+=1
  return count    
 
  
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())

    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')

    fptr.close()

**2D Array - DS
import math
import os
import random
import re
import sys

def hourglassSum(arr):
  max_sum=-50000
  for i in range(0,4):
    for j in range(0,4):
      sum = (arr[i][j]+arr[i][j+1]+arr[i][j+2])+(arr[i+1][j+1])+(arr[i+2][j]+arr[i+2][j+1]+arr[i+2][j+2])
      if (sum>max_sum):
      
        max_sum = sum
      else: continue
  return max_sum      
           

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    arr = []

    for _ in range(6):
        arr.append(list(map(int, input().rstrip().split())))

    result = hourglassSum(arr)

    fptr.write(str(result) + '\n')

    fptr.close()

**Dynamic Array

import math
import os
import random
import re
import sys

def dynamicArray(n, queries):
  seq = [[] for _ in range(n)]
  last_answer=0
  result = []
  
  for q,x,y in queries:
    if q==1:
      idx = (x^last_answer)%n
      seq[idx].append(y)
    else:
      idx = (x^last_answer) %n
      last_answer = seq[idx][y% len(seq[idx])] 
      result.append(last_answer)
  return result    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    q = int(first_multiple_input[1])

    queries = []

    for _ in range(q):
        queries.append(list(map(int, input().rstrip().split())))

    result = dynamicArray(n, queries)

    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

**Left Rotation

import math
import os
import random
import re
import sys

def rotateLeft(d, arr):
  return (arr[d:]+arr[:d])
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    d = int(first_multiple_input[1])

    arr = list(map(int, input().rstrip().split()))

    result = rotateLeft(d, arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
    
    
**Sparse Arrays
import math
import os
import random
import re
import sys

def matchingStrings(strings, queries):
  result=[]
  for q in queries:
    arr=[x for x in strings if x==q]
    result.append(len(arr))
  return result  
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    strings_count = int(input().strip())

    strings = []

    for _ in range(strings_count):
        strings_item = input()
        strings.append(strings_item)

    queries_count = int(input().strip())

    queries = []

    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)

    res = matchingStrings(strings, queries)

    fptr.write('\n'.join(map(str, res)))
    fptr.write('\n')

    fptr.close()


**Array Manipulation
import math
import os
import random
import re
import sys

def arrayManipulation(n, queries):
    acc = {}
    for [a, b, k] in queries:
        acc[a] = (acc[a] if a in acc else 0) + k
        acc[b+1] = (acc[b+1] if b+1 in acc else 0) - k

    last = 0
    m = 0
    for i in range(1,n+1):
        curr = acc[i] if i in acc else 0
        last = last + curr
        if (last > m):
            m = last

    return m
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    m = int(first_multiple_input[1])

    queries = []

    for _ in range(m):
        queries.append(list(map(int, input().rstrip().split())))

    result = arrayManipulation(n, queries)

    fptr.write(str(result) + '\n')

    fptr.close()


**Print the Elements of a Linked List

def printLinkedList(head):
  temp = head
  while temp!=None:
    print(temp.data)
    temp= temp.next
    
**Insert a Node at the Tail of a Linked List  

def insertNodeAtTail(head, data):
  node = SinglyLinkedListNode(data)
  
  if head == None:
    head = node
  else: 
    temp = head
    while temp.next!= None:
      temp = temp.next
    temp.next = node  
  return head   














