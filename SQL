**The PADS

SELECT CONCAT(NAME,'(',LEFT(OCCUPATION, 1),')') 
FROM OCCUPATIONS 
ORDER BY NAME;
SELECT CONCAT('There are a total of ', COUNT(*), ' ', LOWER(OCCUPATION), 's.') 
FROM OCCUPATIONS 
GROUP BY OCCUPATION 
ORDER BY COUNT(*), OCCUPATION;

**Occupations

set @r1=0, @r2=0, @r3=0, @r4=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(select case when Occupation="Doctor" then (@r1:=@r1+1) when Occupation="Professor" then (@r2:=@r2+1) when Occupation="Singer" then (@r3:=@r3+1) when Occupation="Actor" then (@r4:=@r4+1) end as RowNumber,
case when Occupation="Doctor" then Name end as Doctor,
case when Occupation="Professor" then Name end as Professor,
case when Occupation="Singer" then Name end as Singer,
case when Occupation="Actor" then Name end as Actor from OCCUPATIONS order by Name
) Temp group by RowNumber;

**Binary Tree Nodes

SELECT N, IF(P IS NULL,"Root",IF((SELECT COUNT(*) FROM BST WHERE P=B.N)>0,"Inner","Leaf")) FROM BST AS B ORDER BY N;

**New Companies


select c.company_code, c.founder, count(distinct lm.lead_manager_code), count(distinct sm.senior_manager_code), count(distinct m.manager_code), count(distinct e.employee_code) from Company c, 
Lead_Manager lm, Senior_Manager sm, Manager m, Employee e
where c.company_code = lm.company_code and lm.lead_manager_code = sm.lead_manager_code and sm.senior_manager_code = m.senior_manager_code and m.manager_code = e.manager_code group by c.company_code, c.founder
order by c.company_code;

**The Report
SELECT CASE WHEN G.GRADE>7 THEN S.NAME
ELSE NULL
END AS NAMES,
G.GRADE , S.MARKS
FROM STUDENTS S JOIN GRADES G
ON S.MARKS BETWEEN G.MIN_MARK AND G.MAX_MARK
ORDER BY G.GRADE DESC,
NAMES ASC,
S.MARKS ASC;


**Top Competitors

SELECT H.HACKER_ID,H.NAME FROM HACKERS H
JOIN SUBMISSIONS S ON H.HACKER_ID = S.HACKER_ID
JOIN CHALLENGES C ON C.CHALLENGE_ID = S.CHALLENGE_ID
JOIN DIFFICULTY D ON D.SCORE = S.SCORE
AND D.DIFFICULTY_LEVEL = C.DIFFICULTY_LEVEL
GROUP BY H.HACKER_ID, H.NAME
HAVING COUNT(S.SUBMISSION_ID)>1 
ORDER BY COUNT(S.SUBMISSION_ID ) DESC, 
HACKER_ID ASC;

**Ollivander's Inventory

SELECT W.ID, WP.AGE, W.COINS_NEEDED, W.POWER 
FROM WANDS W JOIN WANDS_PROPERTY WP  ON W.CODE = WP.CODE
WHERE WP.IS_EVIL = 0 
AND W.COINS_NEEDED = (SELECT(MIN(A.COINS_NEEDED))
FROM WANDS A JOIN WANDS_PROPERTY B ON A.CODE = B.CODE
WHERE WP.AGE = B.AGE
AND  W.POWER = A.POWER)                     

ORDER BY W.POWER DESC,
 WP.AGE DESC ;
 
** Challenges

SELECT h.hacker_id, 
       h.name, 
       COUNT(c.challenge_id) AS c_count
FROM Hackers h
JOIN Challenges c ON c.hacker_id = h.hacker_id
GROUP BY h.hacker_id, h.name
HAVING c_count = 
    (SELECT COUNT(c2.challenge_id) AS c_max
     FROM challenges as c2 
     GROUP BY c2.hacker_id 
     ORDER BY c_max DESC limit 1)
OR c_count IN 
    (SELECT DISTINCT c_compare AS c_unique
     FROM (SELECT h2.hacker_id, 
                  h2.name, 
                  COUNT(challenge_id) AS c_compare
           FROM Hackers h2
           JOIN Challenges c ON c.hacker_id = h2.hacker_id
           GROUP BY h2.hacker_id, h2.name) counts
     GROUP BY c_compare
     HAVING COUNT(c_compare) = 1)
ORDER BY c_count DESC, h.hacker_id;

**Contest Leaderboard

SELECT H.HACKER_ID, H.NAME, SUM(SSCORE) 
FROM HACKERS H INNER JOIN(SELECT S.HACKER_ID, MAX(SCORE) AS SSCORE FROM SUBMISSIONS S 
GROUP BY S.HACKER_ID, S.CHALLENGE_ID) ST ON H.HACKER_ID = ST.HACKER_ID 
GROUP BY H.HACKER_ID , H.NAME
HAVING SUM(SSCORE)>0
ORDER BY SUM(SSCORE) DESC, H.HACKER_ID ASC;

**15 Days of Learning SQL

SELECT t1.submission_date, hkr_cnt, t2.hacker_id, name
FROM (SELECT p1.submission_date, 
             COUNT(DISTINCT p1.hacker_id) AS hkr_cnt
      FROM (SELECT submission_date, hacker_id, 
                   @h_rnk := CASE WHEN @h_grp != hacker_id THEN 1 ELSE @h_rnk+1 END AS hacker_rank,
                   @h_grp := hacker_id AS hacker_group
            FROM (SELECT DISTINCT submission_date, hacker_id 
                  FROM submissions
                  ORDER BY hacker_id, submission_date) AS a, 
                 (SELECT @h_rnk := 1, @h_grp := 0) AS r) AS p1
      JOIN (SELECT submission_date, 
                   @d_rnk := @d_rnk + 1 AS date_rank
            FROM (SELECT DISTINCT submission_date
                  FROM submissions 
                  ORDER BY submission_date) AS b, 
                 (SELECT @d_rnk := 0) r) AS p2
      ON p1.submission_date = p2.submission_date 
         AND hacker_rank = date_rank
      GROUP BY p1.submission_Date) AS t1
JOIN (SELECT submission_date, hacker_id, sub_cnt,
             @s_rnk := CASE WHEN @d_grp != submission_date THEN 1 ELSE @s_rnk+1 END AS max_rnk,
             @d_grp := submission_date AS date_group
      FROM (SELECT submission_date, hacker_id, COUNT(*) AS sub_cnt
            FROM submissions AS s
            GROUP BY submission_date, hacker_id
            ORDER BY submission_date, sub_cnt DESC, hacker_id) AS c,
           (SELECT @s_rnk := 1, @d_grp := 0) AS r) AS t2                            
ON t1.submission_date = t2.submission_date AND max_rnk = 1
JOIN hackers AS h ON h.hacker_id = t2.hacker_id            
ORDER BY t1.submission_date
;


**Interviews

select con.contest_id,
        con.hacker_id, 
        con.name, 
        sum(total_submissions), 
        sum(total_accepted_submissions), 
        sum(total_views), sum(total_unique_views)
from contests con 
join colleges col on con.contest_id = col.contest_id 
join challenges cha on  col.college_id = cha.college_id 
left join
(select challenge_id, sum(total_views) as total_views, sum(total_unique_views) as total_unique_views
from view_stats group by challenge_id) vs on cha.challenge_id = vs.challenge_id 
left join
(select challenge_id, sum(total_submissions) as total_submissions, sum(total_accepted_submissions) as total_accepted_submissions from submission_stats group by challenge_id) ss on cha.challenge_id = ss.challenge_id
    group by con.contest_id, con.hacker_id, con.name
        having sum(total_submissions)!=0 or 
                sum(total_accepted_submissions)!=0 or
                sum(total_views)!=0 or
                sum(total_unique_views)!=0
            order by contest_id;
            
**SQL Project Planning  

SELECT START_DATE, MIN(END_DATE)
FROM
  (SELECT START_DATE
   FROM PROJECTS
   WHERE START_DATE NOT IN
       (SELECT END_DATE
        FROM PROJECTS)) A,
  (SELECT END_DATE
   FROM PROJECTS
   WHERE END_DATE NOT IN
       (SELECT START_DATE
        FROM PROJECTS)) B
WHERE START_DATE < END_DATE
GROUP BY START_DATE
ORDER BY (MIN(END_DATE) - START_DATE), START_DATE;


**Placements
SELECT A.SN 
FROM (SELECT S.ID SI, S.NAME SN, P.SALARY PS FROM STUDENTS S JOIN PACKAGES P ON S.ID=P.ID) A   JOIN
(SELECT F.ID FI, F.FRIEND_ID FN, PP.SALARY PPS FROM FRIENDS F JOIN PACKAGES PP ON F.FRIEND_ID = PP.ID) B 
ON A.SI=B.FI AND
A.PS<B.PPS
ORDER BY B.PPS ASC;

**Symmetric Pairs

SELECT X,
       Y
FROM FUNCTIONS F1
WHERE EXISTS
    (SELECT *
     FROM FUNCTIONS F2
     WHERE F2.Y = F1.X
       AND F2.X = F1.Y
       AND F2.X > F1.X)
  AND (X != Y)
UNION
SELECT X,
       Y
FROM FUNCTIONS F1
WHERE X = Y
  AND (
         (SELECT COUNT(*)
          FROM FUNCTIONS
          WHERE X = F1.X
            AND Y = F1.X) > 1)
ORDER BY X;

**Print Prime Numbers

SELECT GROUP_CONCAT(NUMB SEPARATOR '&')
FROM (
    SELECT @num:=@num+1 as NUMB FROM
    information_schema.tables t1,
    information_schema.tables t2,
    (SELECT @num:=1) tmp
) tempNum
WHERE NUMB<=1000 AND NOT EXISTS(
    SELECT * FROM (
      SELECT @nu:=@nu+1 as NUMA FROM
          information_schema.tables t1,
          information_schema.tables t2,
          (SELECT @nu:=1) tmp1
          LIMIT 1000
      ) tatata
    WHERE FLOOR(NUMB/NUMA)=(NUMB/NUMA) AND NUMA<NUMB AND NUMA>1
  )



 
